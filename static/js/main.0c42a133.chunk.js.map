{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","startingBalance","setStartingBalance","growthRate","setgrowthRate","compoundRate","setCompoundRate","compoundtime","setCompoundTime","addYrlyContrib","setAdditionalYrlyContrib","type","x","y","plotData","setPlotData","gainsByYear","setGainsByYear","useEffect","a","startingBalanceN","Number","growthRateN","compoundRateN","compoundtimeN","yrlyContrib","growthRateVariances","map","rateVariance","name","ct","start","yrlyAdd","i","push","Math","pow","toFixed","calcGrowth","className","htmlFor","value","onChange","e","target","style","display","justifyContent","g","j","toLocaleString","includes","data","layout","width","height","title","yaxis","tickprefix","text","xaxis","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0c42a133.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./index.css\";\nimport Plot from \"react-plotly.js\";\n\nfunction calcGrowth(\n  ct: number,\n  start: number,\n  yrlyAdd: number,\n  growthRate: number,\n  compoundRate: number\n) {\n  const x = [];\n  const y = [];\n  for (let i = 0; i < ct; i++) {\n    x.push(i + 1);\n\n    start =\n      yrlyAdd +\n      start * Math.pow(1 + growthRate / 100 / compoundRate, compoundRate);\n    y.push(Number(start.toFixed(2)));\n  }\n  return { x, y };\n}\n\nfunction App() {\n  const [startingBalance, setStartingBalance] = useState(\"0\");\n  const [growthRate, setgrowthRate] = useState(\"5\");\n  const [compoundRate, setCompoundRate] = useState(\"1\");\n  const [compoundtime, setCompoundTime] = useState(\"10\");\n  const [addYrlyContrib, setAdditionalYrlyContrib] = useState(\"0\");\n  const [plotData, setPlotData] = useState<any>([\n    { type: \"line\", x: [], y: [] },\n  ]);\n\n  const [gainsByYear, setGainsByYear] = useState<number[]>([]);\n\n  useEffect(() => {\n    const a = [];\n    let startingBalanceN = Number(startingBalance);\n    const growthRateN = Number(growthRate);\n    const compoundRateN = Number(compoundRate);\n    const compoundtimeN = Number(compoundtime);\n    const yrlyContrib = Number(addYrlyContrib);\n\n    const growthRateVariances = [0, 1, 2, -1, -2].map((rateVariance) => ({\n      type: \"line\",\n      name: growthRateN + rateVariance + '% Growth',\n      ...calcGrowth(\n        compoundtimeN,\n        startingBalanceN,\n        yrlyContrib,\n        growthRateN + rateVariance,\n        compoundRateN\n      ),\n    }));\n\n    for (let i = 0; i < compoundtimeN; i++) {\n\n      startingBalanceN =\n        yrlyContrib +\n        startingBalanceN *\n          Math.pow(1 + growthRateN / 100 / compoundRateN, compoundRateN);\n      a.push(startingBalanceN);\n    }\n    setGainsByYear(a);\n    setPlotData([ ...growthRateVariances]);\n  }, [startingBalance, growthRate, compoundRate, compoundtime, addYrlyContrib]);\n  return (\n    <div className=\"App\">\n      <label htmlFor=\"\">Starting Balance $</label>\n      <input\n        type=\"number\"\n        value={startingBalance}\n        onChange={(e) => setStartingBalance(e.target.value)}\n      />\n\n      <label htmlFor=\"\">Rate Of Growth %</label>\n      <input\n        type=\"number\"\n        value={growthRate}\n        onChange={(e) => setgrowthRate(e.target.value)}\n      />\n\n      <label htmlFor=\"\">Compound Rate</label>\n      <input\n        type=\"number\"\n        value={compoundRate}\n        onChange={(e) => setCompoundRate(e.target.value)}\n      />\n\n      <label htmlFor=\"\">Compound Time</label>\n      <input\n        type=\"number\"\n        value={compoundtime}\n        onChange={(e) => setCompoundTime(e.target.value)}\n      />\n\n      <label htmlFor=\"\">Additional Yearly Contributions</label>\n      <input\n        type=\"number\"\n        value={addYrlyContrib}\n        onChange={(e) => setAdditionalYrlyContrib(e.target.value)}\n      />\n\n      <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n        <table>\n          <thead>\n            <tr>\n              <td>Year</td>\n              <td>Amount</td>\n            </tr>\n          </thead>\n          <tbody>\n            {gainsByYear.map((g, j) => (\n              <tr key={j}>\n                <td>{j + 1}</td>\n                <td>\n                  $\n                  {g.toLocaleString().includes(\".\")\n                    ? g.toLocaleString()\n                    : g.toLocaleString() + \".00\"}\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n        <Plot\n          data={plotData}\n          layout={{ width: 800, height: 600, title: \"Growth Over Time\",yaxis: {tickprefix: '$',title: { text: 'Total $$$'}}, xaxis: {title: { text: 'Years Of Growth'}} }}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}