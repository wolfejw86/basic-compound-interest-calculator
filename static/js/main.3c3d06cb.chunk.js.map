{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","startingBalance","setStartingBalance","growthRate","setgrowthRate","compoundRate","setCompoundRate","compoundtime","setCompoundTime","addYrlyContrib","setAdditionalYrlyContrib","type","x","y","plotData","setPlotData","gainsByYear","setGainsByYear","Plotly","setPlotly","useEffect","then","Plot","a","startingBalanceN","Number","growthRateN","compoundRateN","compoundtimeN","yrlyContrib","growthRateVariances","map","rateVariance","name","ct","start","yrlyAdd","i","push","Math","pow","toFixed","calcGrowth","className","htmlFor","value","onChange","e","target","g","j","toLocaleString","includes","default","data","layout","title","yaxis","tickprefix","text","xaxis","config","responsive","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3c3d06cb.chunk.js","sourcesContent":["/* eslint-disable react/jsx-pascal-case */\nimport React, { useEffect, useState } from \"react\";\nimport \"./index.css\";\n\nfunction calcGrowth(\n  ct: number,\n  start: number,\n  yrlyAdd: number,\n  growthRate: number,\n  compoundRate: number\n) {\n  const x = [];\n  const y = [];\n  for (let i = 0; i < ct; i++) {\n    x.push(i + 1);\n\n    start =\n      yrlyAdd +\n      start * Math.pow(1 + growthRate / 100 / compoundRate, compoundRate);\n    y.push(Number(start.toFixed(2)));\n  }\n  return { x, y };\n}\n\nfunction App() {\n  const [startingBalance, setStartingBalance] = useState(\"0\");\n  const [growthRate, setgrowthRate] = useState(\"5\");\n  const [compoundRate, setCompoundRate] = useState(\"1\");\n  const [compoundtime, setCompoundTime] = useState(\"10\");\n  const [addYrlyContrib, setAdditionalYrlyContrib] = useState(\"0\");\n  const [plotData, setPlotData] = useState<any>([\n    { type: \"line\", x: [], y: [] },\n  ]);\n\n  const [gainsByYear, setGainsByYear] = useState<number[]>([]);\n\n  const [Plotly, setPlotly] = useState<any>(null);\n\n  useEffect(() => {\n    import(\"react-plotly.js\").then((Plot) => {\n      setPlotly(Plot);\n    });\n  }, []);\n\n  useEffect(() => {\n    if (!Plotly) {\n      return;\n    }\n\n    const a = [];\n    let startingBalanceN = Number(startingBalance);\n    const growthRateN = Number(growthRate);\n    const compoundRateN = Number(compoundRate);\n    const compoundtimeN = Number(compoundtime);\n    const yrlyContrib = Number(addYrlyContrib);\n\n    const growthRateVariances = [0, 1, 2, -1, -2].map((rateVariance) => ({\n      type: \"line\",\n      name: growthRateN + rateVariance + \"% Growth\",\n      ...calcGrowth(\n        compoundtimeN,\n        startingBalanceN,\n        yrlyContrib,\n        growthRateN + rateVariance,\n        compoundRateN\n      ),\n    }));\n\n    for (let i = 0; i < compoundtimeN; i++) {\n      startingBalanceN =\n        yrlyContrib +\n        startingBalanceN *\n          Math.pow(1 + growthRateN / 100 / compoundRateN, compoundRateN);\n      a.push(startingBalanceN);\n    }\n    setGainsByYear(a);\n    setPlotData([...growthRateVariances]);\n  }, [\n    startingBalance,\n    growthRate,\n    compoundRate,\n    compoundtime,\n    addYrlyContrib,\n    Plotly,\n  ]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"input-container\">\n        <label htmlFor=\"startingBalance\">Starting Balance $</label>\n        <input\n          type=\"number\"\n          name=\"startingBalance\"\n          value={startingBalance}\n          onChange={(e) => setStartingBalance(e.target.value)}\n        />\n      </div>\n\n      <div className=\"input-container\">\n        <label htmlFor=\"growthRate\">Rate Of Growth %</label>\n        <input\n          type=\"number\"\n          name=\"growthRate\"\n          value={growthRate}\n          onChange={(e) => setgrowthRate(e.target.value)}\n        />\n      </div>\n\n      <div className=\"input-container\">\n        <label htmlFor=\"compoundRate\">Compound Rate</label>\n        <input\n          type=\"number\"\n          name=\"compoundRate\"\n          value={compoundRate}\n          onChange={(e) => setCompoundRate(e.target.value)}\n        />\n      </div>\n\n      <div className=\"input-container\">\n        <label htmlFor=\"compoundtime\">Compound Time</label>\n        <input\n          type=\"number\"\n          name=\"compoundtime\"\n          value={compoundtime}\n          onChange={(e) => setCompoundTime(e.target.value)}\n        />\n      </div>\n\n      <div className=\"input-container\">\n        <label htmlFor=\"addYrlyContrib\">Additional Yearly Contributions</label>\n        <input\n          type=\"number\"\n          name=\"addYrlyContrib\"\n          value={addYrlyContrib}\n          onChange={(e) => setAdditionalYrlyContrib(e.target.value)}\n        />\n      </div>\n\n      <div className=\"output-container\">\n        <div className=\"table\">\n          <h2>Compounded Balance By Year</h2>\n          <table>\n            <thead>\n              <tr>\n                <td>Year</td>\n                <td>Amount</td>\n              </tr>\n            </thead>\n            <tbody>\n              {gainsByYear.map((g, j) => (\n                <tr key={j}>\n                  <td>{j + 1}</td>\n                  <td>\n                    $\n                    {g.toLocaleString().includes(\".\")\n                      ? g.toLocaleString()\n                      : g.toLocaleString() + \".00\"}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n        {Plotly && (\n          <div className=\"chartt\">\n            <Plotly.default\n              data={plotData}\n              layout={{\n                title: \"Growth Over Time\",\n                yaxis: { tickprefix: \"$\", title: { text: \"Total $$$\" } },\n                xaxis: { title: { text: \"Years Of Growth\" } },\n              }}\n              config={{ responsive: true }}\n            />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}